--- ../net/minecraft/logging/LogAgent.java
+++ ../net/minecraft/logging/LogAgent.java
@@ -5,6 +5,9 @@
 import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import net.minecraft.server.MinecraftServer;
+
+import java.io.File; // CraftBukkit
 
 public class LogAgent implements ILogAgent
 {
@@ -12,6 +15,7 @@
     private final String field_98240_b;
     private final String field_98241_c;
     private final String field_98239_d;
+    public static Logger global = Logger.getLogger(""); // CraftBukkit
 
     public LogAgent(String p_i11036_1_, String p_i11036_2_, String p_i11036_3_)
     {
@@ -35,15 +39,105 @@
         }
 
         LogFormatter logformatter = new LogFormatter(this, (LogAgentINNER1)null);
-        ConsoleHandler consolehandler = new ConsoleHandler();
+        // CraftBukkit start
+        MinecraftServer server = MinecraftServer.func_71276_C();
+        ConsoleHandler consolehandler = new org.bukkit.craftbukkit.util.TerminalConsoleHandler(server.reader);
+        // CraftBukkit end
         consolehandler.setFormatter(logformatter);
         this.field_98242_a.addHandler(consolehandler);
 
+        // CraftBukkit start
+        for (java.util.logging.Handler handler : global.getHandlers())
+        {
+            global.removeHandler(handler);
+        }
+
+        consolehandler.setFormatter(new org.bukkit.craftbukkit.util.ShortConsoleLogFormatter(server));
+        global.addHandler(consolehandler);
+        // CraftBukkit end
+
         try
         {
-            FileHandler filehandler = new FileHandler(this.field_98240_b, true);
+            // CraftBukkit start
+            String pattern = (String) server.options.valueOf("log-pattern");
+            // We have to parse the pattern ourself so we can create directories as needed (java #6244047)
+            String tmpDir = System.getProperty("java.io.tmpdir");
+            String homeDir = System.getProperty("user.home");
+
+            if (tmpDir == null)
+            {
+                tmpDir = homeDir;
+            }
+
+            // We only care about parsing for directories, FileHandler can do file names by itself
+            File parent = new File(pattern).getParentFile();
+            StringBuilder fixedPattern = new StringBuilder();
+            String parentPath = "";
+
+            if (parent != null)
+            {
+                parentPath = parent.getPath();
+            }
+
+            int j = 0;
+
+            while (j < parentPath.length())
+            {
+                char ch = parentPath.charAt(j);
+                char ch2 = 0;
+
+                if (j + 1 < parentPath.length())
+                {
+                    ch2 = Character.toLowerCase(pattern.charAt(j + 1));
+                }
+
+                if (ch == '%')
+                {
+                    if (ch2 == 'h')
+                    {
+                        j += 2;
+                        fixedPattern.append(homeDir);
+                        continue;
+                    }
+                    else if (ch2 == 't')
+                    {
+                        j += 2;
+                        fixedPattern.append(tmpDir);
+                        continue;
+                    }
+                    else if (ch2 == '%')
+                    {
+                        // Even though we don't care about this we have to skip it to avoid matching %%t
+                        j += 2;
+                        fixedPattern.append("%%");
+                        continue;
+                    }
+                    else if (ch2 != 0)
+                    {
+                        throw new java.io.IOException("log-pattern can only use %t and %h for directories, got %" + ch2);
+                    }
+                }
+
+                fixedPattern.append(ch);
+                j++;
+            }
+
+            // Try to create needed parent directories
+            parent = new File(fixedPattern.toString());
+
+            if (parent != null)
+            {
+                parent.mkdirs();
+            }
+
+            int limit = (Integer) server.options.valueOf("log-limit");
+            int count = (Integer) server.options.valueOf("log-count");
+            boolean append = (Boolean) server.options.valueOf("log-append");
+            FileHandler filehandler = new FileHandler(pattern, limit, count, append);
+            // CraftBukkit end
             filehandler.setFormatter(logformatter);
             this.field_98242_a.addHandler(filehandler);
+            global.addHandler(filehandler); // CraftBukkit
         }
         catch (Exception exception)
         {
